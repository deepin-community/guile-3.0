;;;; bitvectors.test --- tests guile's bitvectors     -*- scheme -*-
;;;;
;;;; Copyright 2010, 2011, 2013, 2014, 2020 Free Software Foundation, Inc.
;;;;
;;;; This library is free software; you can redistribute it and/or
;;;; modify it under the terms of the GNU Lesser General Public
;;;; License as published by the Free Software Foundation; either
;;;; version 3 of the License, or (at your option) any later version.
;;;; 
;;;; This library is distributed in the hope that it will be useful,
;;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;;; Lesser General Public License for more details.
;;;; 
;;;; You should have received a copy of the GNU Lesser General Public
;;;; License along with this library; if not, write to the Free Software
;;;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

(define-module (test-suite test-bitvectors)
  #:use-module (test-suite lib))


(with-test-prefix "predicates"
  (pass-if (bitvector? #*1010101010))
  (pass-if (array? #*1010101010))
  (pass-if (eq? (array-type #*1010101010) 'b)))

(with-test-prefix "equality"
  (pass-if (equal? #*1010101 #*1010101))
  (pass-if (array-equal? #*1010101 #*1010101))

  (pass-if (not (equal? #*10101010 #*1010101)))
  (pass-if (not (array-equal? #*10101010 #*1010101))))

(with-test-prefix "lists"
  (pass-if (equal? (bitvector->list #*10010) '(#t #f #f #t #f)))
  (pass-if (equal? (array->list #*10010) '(#t #f #f #t #f)))
  (pass-if (equal? #*10010 (list->bitvector '(#t #f #f #t #f)))))

(with-test-prefix "ref and set"
  (with-test-prefix "as bitvector"
    (let ((bv (list->bitvector '(#f #f #t #f #t))))
      (pass-if (eqv? (bitvector-bit-set? bv 0) #f))
      (pass-if (eqv? (bitvector-bit-set? bv 2) #t))
      (bitvector-set-bit! bv 0)
      (pass-if (eqv? (bitvector-bit-set? bv 0) #t))
      (pass-if (eqv? (bitvector-bit-clear? bv 0) #f))
      (bitvector-clear-bit! bv 0)
      (pass-if (eqv? (bitvector-bit-set? bv 0) #f))
      (pass-if (eqv? (bitvector-bit-clear? bv 0) #t))))

  (with-test-prefix "as array"
    (let ((bv (list->bitvector '(#f #f #t #f #t))))
      (pass-if (eqv? (array-ref bv 0) #f))
      (pass-if (eqv? (array-ref bv 2) #t))
      (array-set! bv #t 0)
      (pass-if (eqv? (array-ref bv 0) #t)))))

(with-test-prefix "all bits"
  (let ((bv (make-bitvector 5)))
    (pass-if-equal #*00000 bv)
    (bitvector-set-all-bits! bv)
    (pass-if-equal #*11111 bv)
    (bitvector-clear-all-bits! bv)
    (pass-if-equal #*00000 bv)
    (bitvector-flip-all-bits! bv)
    (pass-if-equal #*11111 bv)
    (bitvector-flip-all-bits! bv)
    (pass-if-equal #*00000 bv)))

(with-test-prefix "bitvector-set-bits!"
  (pass-if "#t"
    (let ((v (bitvector #t #t #f #f)))
      (bitvector-set-bits! v #*1010)
      (equal? v #*1110)))
  (pass-if "#t, shorter"
    (let ((v (bitvector #t #t #f #f)))
      (bitvector-set-bits! v #*101)
      (equal? v #*1110))))

(with-test-prefix "bitvector-clear-bits!"
  (pass-if "#f"
    (let ((v (bitvector #t #t #f #f)))
      (bitvector-clear-bits! v #*1010)
      (equal? v #*0100)))
  (pass-if "#f, shorter"
    (let ((v (bitvector #t #t #f #f)))
      (bitvector-clear-bits! v #*101)
      (equal? v #*0100))))

(with-test-prefix "bitvector-count"
  (pass-if-equal 6 (bitvector-count #*01110111))
  (pass-if-equal 2 (let ((bv #*01110111))
                     (- (bitvector-length bv) (bitvector-count bv)))))

(with-test-prefix "bitvector-position"
  (pass-if-equal 0 (bitvector-position #*01110111 #f))
  (pass-if-equal 1 (bitvector-position #*01110111 #t))
  (pass-if-equal 4 (bitvector-position #*01110111 #f 1))
  (pass-if-equal 4 (bitvector-position #*01110111 #f 4))
  (pass-if-equal 5 (bitvector-position #*01110111 #t 5))
  (pass-if-equal #f (bitvector-position #*01110111 #f 5)))

(with-test-prefix "bitvector-count-bits"
  (pass-if-equal 3 (bitvector-count-bits #*01110111 #*11001101)))
